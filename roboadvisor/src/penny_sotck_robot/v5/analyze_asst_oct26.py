#!/usr/bin/env python3
"""
An√°lisis retrospectivo de ASST el 26 de octubre 2025
Para determinar si la nueva l√≥gica de d√≠a 3 lo habr√≠a detectado
"""

import sys
import os
import yfinance as yf
from datetime import datetime, timedelta

# Agregar utils al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'utils'))

from penny_stock_advisor_v5 import PennyStockAdvisorV5
from integration_v5_trading_manager import MarketContextAnalyzerV5

def analyze_asst_october26():
    """Analiza ASST con datos del 26 de octubre (retrospectivo)"""
    print("\n" + "="*70)
    print("AN√ÅLISIS RETROSPECTIVO: ASST - 26 OCTUBRE 2025")
    print("="*70)
    print("\nüîç Obteniendo datos hist√≥ricos de ASST hasta el 26 de octubre...")

    try:
        # Obtener datos hasta el 26 de octubre
        ticker = yf.Ticker("ASST")

        # Datos desde principios de octubre hasta el 26
        hist = ticker.history(start="2025-10-01", end="2025-10-27")

        if len(hist) == 0:
            print("‚ùå No se pudieron obtener datos hist√≥ricos")
            return

        print(f"‚úÖ Datos obtenidos: {len(hist)} d√≠as")
        print(f"\nüìä √öLTIMOS 10 D√çAS DE TRADING:")
        print("-" * 70)
        print(f"{'Fecha':<12} {'Cierre':>10} {'Volumen':>15} {'Alto':>10} {'Bajo':>10}")
        print("-" * 70)

        for idx in range(max(0, len(hist) - 10), len(hist)):
            date = hist.index[idx].strftime('%Y-%m-%d')
            close = hist['Close'].iloc[idx]
            volume = hist['Volume'].iloc[idx]
            high = hist['High'].iloc[idx]
            low = hist['Low'].iloc[idx]
            print(f"{date:<12} ${close:>9.3f} {volume:>15,} ${high:>9.3f} ${low:>9.3f}")

        # Analizar datos del 25 de octubre (viernes antes del fin de semana)
        # El 26 fue s√°bado, as√≠ que los √∫ltimos datos disponibles ser√≠an del 25
        print(f"\n" + "="*70)
        print("DATOS DEL 25 DE OCTUBRE 2025 (VIERNES)")
        print("="*70)

        # Buscar el 25 de octubre
        oct25_data = None
        oct25_idx = None

        for idx in range(len(hist)):
            if hist.index[idx].strftime('%Y-%m-%d') == '2025-10-25':
                oct25_data = hist.iloc[idx]
                oct25_idx = idx
                break

        if oct25_data is None:
            print("‚ö†Ô∏è No hay datos del 25 de octubre (mercado cerrado o data no disponible)")
            # Usar el √∫ltimo d√≠a disponible
            oct25_idx = len(hist) - 1
            oct25_data = hist.iloc[oct25_idx]
            oct25_date = hist.index[oct25_idx].strftime('%Y-%m-%d')
            print(f"üìÖ Usando √∫ltimo d√≠a disponible: {oct25_date}")

        print(f"\nüìà Precio cierre: ${oct25_data['Close']:.3f}")
        print(f"üìä Volumen: {oct25_data['Volume']:,}")
        print(f"üìâ Rango: ${oct25_data['Low']:.3f} - ${oct25_data['High']:.3f}")

        # Calcular m√©tricas clave
        print(f"\n" + "="*70)
        print("AN√ÅLISIS T√âCNICO AL 25 DE OCTUBRE")
        print("="*70)

        # Volumen promedio 20 d√≠as
        if oct25_idx >= 20:
            avg_volume_20d = hist['Volume'].iloc[oct25_idx-19:oct25_idx+1].mean()
            volume_ratio = oct25_data['Volume'] / avg_volume_20d
            print(f"\nüìä VOLUMEN:")
            print(f"   ‚Ä¢ Volumen 25 oct: {oct25_data['Volume']:,}")
            print(f"   ‚Ä¢ Promedio 20d: {avg_volume_20d:,.0f}")
            print(f"   ‚Ä¢ Ratio: {volume_ratio:.2f}x")
        else:
            avg_volume_20d = hist['Volume'].mean()
            volume_ratio = oct25_data['Volume'] / avg_volume_20d
            print(f"   ‚Ä¢ Datos insuficientes para 20d, usando promedio total")

        # Calcular d√≠as consecutivos de volumen alto
        consecutive_high_volume = 0
        spike_threshold = 2.5

        for i in range(oct25_idx, -1, -1):
            vol_ratio = hist['Volume'].iloc[i] / avg_volume_20d if avg_volume_20d > 0 else 0
            if vol_ratio >= spike_threshold:
                consecutive_high_volume += 1
            else:
                break

        print(f"\n‚è∞ D√çAS DE EXPLOSI√ìN:")
        print(f"   ‚Ä¢ D√≠as consecutivos vol > {spike_threshold}x: {consecutive_high_volume}")
        print(f"   ‚Ä¢ Status: ", end="")

        if consecutive_high_volume == 1:
            print("D√çA 1 - PERFECTO")
        elif consecutive_high_volume == 2:
            print("D√çA 2 - BUENO")
        elif consecutive_high_volume == 3:
            print("D√çA 3 - TARD√çO (evaluar condiciones)")
        else:
            print(f"D√çA {consecutive_high_volume} - MUY TARD√çO")

        # Cambio de precio en 3 d√≠as
        if oct25_idx >= 3:
            price_3d_ago = hist['Close'].iloc[oct25_idx - 3]
            price_current = oct25_data['Close']
            price_change_3d = ((price_current - price_3d_ago) / price_3d_ago * 100)

            print(f"\nüí∞ PRECIO:")
            print(f"   ‚Ä¢ Hace 3 d√≠as: ${price_3d_ago:.3f}")
            print(f"   ‚Ä¢ 25 octubre: ${price_current:.3f}")
            print(f"   ‚Ä¢ Cambio 3d: {price_change_3d:+.1f}%")

        # Compresi√≥n previa (5 d√≠as antes del spike)
        if oct25_idx >= 5:
            # Ver si hubo compresi√≥n en d√≠as previos
            lookback = 5
            if consecutive_high_volume > 0:
                # Ver compresi√≥n antes del primer d√≠a de spike
                compression_start = oct25_idx - consecutive_high_volume - lookback
                compression_end = oct25_idx - consecutive_high_volume

                if compression_start >= 0:
                    compression_period = hist['Close'].iloc[compression_start:compression_end+1]
                    price_range_pct = ((compression_period.max() - compression_period.min()) / compression_period.min() * 100)

                    print(f"\nüîÑ COMPRESI√ìN PREVIA:")
                    print(f"   ‚Ä¢ Per√≠odo analizado: {lookback} d√≠as antes del spike")
                    print(f"   ‚Ä¢ Rango de precio: {price_range_pct:.1f}%")
                    print(f"   ‚Ä¢ ¬øComprimido? (<8%): {'‚úÖ S√ç' if price_range_pct <= 8 else '‚ùå NO'}")

        # RSI simple (14 per√≠odos)
        if oct25_idx >= 14:
            closes = hist['Close'].iloc[:oct25_idx+1]
            deltas = closes.diff()
            gain = deltas.where(deltas > 0, 0).rolling(window=14).mean()
            loss = (-deltas.where(deltas < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            rsi = 100 - (100 / (1 + rs))
            rsi_value = rsi.iloc[-1]

            print(f"\nüìä RSI (14):")
            print(f"   ‚Ä¢ Valor: {rsi_value:.0f}")
            print(f"   ‚Ä¢ Status: ", end="")
            if rsi_value < 30:
                print("Sobrevendido")
            elif rsi_value > 70:
                print("Sobrecomprado")
            else:
                print("Neutral")

        # Evaluaci√≥n con nueva l√≥gica d√≠a 3
        print(f"\n" + "="*70)
        print("EVALUACI√ìN CON NUEVA L√ìGICA D√çA 3")
        print("="*70)

        if consecutive_high_volume == 3:
            print(f"\n‚úÖ D√≠a 3 detectado - Evaluando condiciones estrictas:")
            print(f"\n   1Ô∏è‚É£ Volumen ‚â• 3.5x promedio:")
            if volume_ratio >= 3.5:
                print(f"      ‚úÖ CUMPLE: {volume_ratio:.2f}x ‚â• 3.5x")
            else:
                print(f"      ‚ùå NO CUMPLE: {volume_ratio:.2f}x < 3.5x")

            print(f"\n   2Ô∏è‚É£ RSI ‚â§ 75:")
            if oct25_idx >= 14:
                if rsi_value <= 75:
                    print(f"      ‚úÖ CUMPLE: {rsi_value:.0f} ‚â§ 75")
                else:
                    print(f"      ‚ùå NO CUMPLE: {rsi_value:.0f} > 75")
            else:
                print(f"      ‚ö†Ô∏è Datos insuficientes para RSI")

            print(f"\n   3Ô∏è‚É£ Cambio precio ‚â§ 60% en 3d:")
            if oct25_idx >= 3:
                if price_change_3d <= 60:
                    print(f"      ‚úÖ CUMPLE: {price_change_3d:.1f}% ‚â§ 60%")
                else:
                    print(f"      ‚ùå NO CUMPLE: {price_change_3d:.1f}% > 60%")

            # Conclusi√≥n
            print(f"\n" + "-"*70)
            conditions_met = 0
            if volume_ratio >= 3.5:
                conditions_met += 1
            if oct25_idx >= 14 and rsi_value <= 75:
                conditions_met += 1
            if oct25_idx >= 3 and price_change_3d <= 60:
                conditions_met += 1

            if conditions_met >= 3:
                print(f"‚úÖ CALIFICA PARA ENTRADA TARD√çA D√çA 3")
                print(f"   ‚Ä¢ Todas las condiciones cumplidas ({conditions_met}/3)")
                print(f"   ‚Ä¢ Penalizaci√≥n: -15 pts (vs -30 pts)")
                print(f"   ‚Ä¢ Posici√≥n reducida: 2% (vs 3%)")
            else:
                print(f"‚ùå NO CALIFICA PARA ENTRADA TARD√çA")
                print(f"   ‚Ä¢ Condiciones cumplidas: {conditions_met}/3")
                print(f"   ‚Ä¢ Penalizaci√≥n: -30 pts")
        elif consecutive_high_volume < 3:
            print(f"\n‚úÖ D√≠a {consecutive_high_volume} - NO necesita evaluaci√≥n especial")
            print(f"   ‚Ä¢ Penalizaci√≥n: 0 pts")
        else:
            print(f"\n‚ùå D√≠a {consecutive_high_volume} - MUY TARDE")
            print(f"   ‚Ä¢ Penalizaci√≥n: -30 pts")

        print(f"\n" + "="*70)

    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_asst_october26()
