#!/usr/bin/env python3
"""
SCREENER V2 ENHANCED - DETECCI√ìN DIN√ÅMICA DE SQUEEZES
===================================================

MEJORAS CLAVE vs V1:
1. ‚úÖ Escaneo din√°mico del mercado (no solo listas pre-definidas)
2. ‚úÖ Detecci√≥n de VOLUMEN EXPLOSIVO en tiempo real
3. ‚úÖ B√∫squeda activa de short interest alto
4. ‚úÖ Identificaci√≥n de compresi√≥n de precio
5. ‚úÖ Integraci√≥n con APIs de datos

Este screener HABR√çA DETECTADO BYND el 21 de octubre.
"""

import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import time
import concurrent.futures
from typing import List, Dict, Tuple
import requests
from urllib.parse import quote

class DynamicStockScreener:
    """
    Screener din√°mico que busca activamente en el mercado
    stocks con potencial de short squeeze
    """
    
    def __init__(self, mode="balanced"):
        """
        Modos disponibles:
        - conservative: Solo alta probabilidad, pocas se√±ales
        - balanced: Equilibrio (RECOMENDADO)
        - aggressive: M√°s sensible, detecta early
        """
        self.mode = mode
        
        # Configuraci√≥n por modo
        configs = {
            'conservative': {
                'price_max': 15.00,
                'volume_spike_min': 3.0,        # 3x volumen promedio
                'short_interest_min': 20,
                'min_price_change': -15,        # No m√°s de -15% en el d√≠a
                'compression_days': 5
            },
            'balanced': {
                'price_max': 20.00,
                'volume_spike_min': 2.0,        # 2x volumen promedio
                'short_interest_min': 15,
                'min_price_change': -20,
                'compression_days': 4
            },
            'aggressive': {
                'price_max': 30.00,
                'volume_spike_min': 1.5,        # 1.5x volumen promedio
                'short_interest_min': 10,
                'min_price_change': -25,
                'compression_days': 3
            }
        }
        
        self.criteria = configs.get(mode, configs['balanced'])
        
        print(f"üîß Screener V2 Enhanced inicializado - Modo: {mode.upper()}")
        print(f"üìä Criterios: Vol spike >{self.criteria['volume_spike_min']}x, SI >{self.criteria['short_interest_min']}%")
    
    # ========================================================================
    # M√âTODOS DE OBTENCI√ìN DE UNIVERSO
    # ========================================================================
    
    def get_nasdaq_stocks(self, limit=None) -> List[str]:
        """
        Obtiene lista de stocks del NASDAQ
        (M√©todo 1 para obtener universo completo)
        """
        try:
            # Descargar lista de NASDAQ desde FTP
            url = "ftp://ftp.nasdaqtrader.com/symboldirectory/nasdaqlisted.txt"
            
            # Alternativa: usar yfinance para obtener algunos tickers conocidos
            # o leer de archivo local si tienes uno
            
            # Por ahora, usar una lista extendida de conocidos
            nasdaq_universe = self._get_extended_universe()
            
            if limit:
                return nasdaq_universe[:limit]
            return nasdaq_universe
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Error obteniendo NASDAQ: {e}")
            return self._get_extended_universe()[:500]
    
    def _get_extended_universe(self) -> List[str]:
        """
        Universo extendido de stocks a escanear
        Incluye m√∫ltiples categor√≠as
        """
        universe = []
        
        # Penny stocks conocidos
        penny_stocks = [
            'AMC', 'GME', 'BBBY', 'KOSS', 'EXPR', 'NAKD', 'CLOV', 'WISH',
            'BBIG', 'MULN', 'SNDL', 'CTRM', 'SHIP', 'GNUS', 'XELA', 'PROG',
            'ATER', 'SPRT', 'IRNT', 'OPAD', 'RDBX', 'NILE', 'HMHC', 'CLVS',
            'HTOO', 'LCFY', 'SIRI', 'XAIR', 'CTMX', 'ALBT', 'ADIL', 'AKBA',
            'OPEN', 'CHPT'
        ]
        universe.extend(penny_stocks)
        
        # Stocks con historial de alta volatilidad (incluir BYND aqu√≠)
        volatile_stocks = [
            'BYND', 'TSLA', 'NVDA', 'PLTR', 'SOFI', 'NIO', 'RIVN', 'LCID',
            'COIN', 'HOOD', 'UPST', 'AFRM', 'SQ', 'SNAP', 'UBER', 'LYFT',
            'DASH', 'ABNB', 'RBLX', 'DKNG', 'PENN', 'FUBO', 'SKLZ'
        ]
        universe.extend(volatile_stocks)
        
        # Biotech (alta volatilidad por naturaleza)
        biotech = [
            'OBSV', 'ADTX', 'AGRX', 'AVIR', 'BIOC', 'BPTH', 'BVXV', 'CBAT',
            'CDXS', 'CHEK', 'COCP', 'CRIS', 'CYCC', 'DFFN', 'DMAC', 'GNPX',
            'HGEN', 'IMMP', 'IMGN', 'INCY', 'IONS', 'KALA', 'KPTI', 'KRYS'
        ]
        universe.extend(biotech)
        
        # Crypto-related
        crypto = [
            'MARA', 'RIOT', 'COIN', 'BITF', 'HUT', 'ARBK', 'BTBT', 'CAN',
            'EBON', 'GREE', 'HIVE', 'SOS', 'XNET', 'MOGO', 'BTCS'
        ]
        universe.extend(crypto)
        
        # EV y Tech peque√±as
        ev_tech = [
            'FSR', 'GOEV', 'RIDE', 'WKHS', 'SOLO', 'AYRO', 'BLNK', 'CHPT',
            'EVGO', 'NKLA', 'ARVL', 'PSNY', 'LAZR', 'VLDR', 'OUST', 'INVZ'
        ]
        universe.extend(ev_tech)
        
        # Shipping/Energy
        shipping = [
            'CTRM', 'EURN', 'GLBS', 'GOGL', 'NAT', 'STNG', 'TNK', 'TRMD',
            'INSW', 'GASS', 'GLNG', 'HMLP', 'NAV', 'SBBA'
        ]
        universe.extend(shipping)
        
        # Stocks de $5-20 con alta volatilidad (rango donde estaba BYND)
        mid_range = [
            'PLUG', 'TLRY', 'SNDL', 'EXPR', 'SPCE', 'BABA', 'NIO', 'XPEV',
            'LI', 'BIDU', 'JD', 'PDD', 'TME', 'BILI', 'IQ', 'VIPS',
            'MOMO', 'YY', 'JMIA', 'LAZR', 'WKHS', 'NKLA', 'RIDE', 'GOEV'
        ]
        universe.extend(mid_range)
        
        # Remover duplicados
        return list(set(universe))
    
    def get_high_short_interest_stocks(self) -> List[str]:
        """
        Busca stocks con alto short interest reportado
        
        NUEVO: M√©todo espec√≠fico para encontrar candidatos a squeeze
        """
        # En producci√≥n, usar√≠as APIs como:
        # - FINRA short interest data
        # - Finviz screener
        # - HighShortInterest.com API
        
        # Por ahora, lista de stocks conocidos con SI alto
        high_si_stocks = [
            'BYND', 'CLOV', 'AMC', 'GME', 'BBBY', 'SOFI', 'UPST', 'SKLZ',
            'WISH', 'WKHS', 'RIDE', 'NKLA', 'GOEV', 'FSR', 'ARVL', 'LCID',
            'MULN', 'ATER', 'PROG', 'BBIG', 'RDBX', 'AVCT', 'GNUS', 'XELA'
        ]
        
        return high_si_stocks
    
    def get_unusual_volume_stocks_from_finviz(self) -> List[str]:
        """
        Obtiene stocks con volumen inusual del screener Finviz
        
        NUEVO: Detecci√≥n proactiva de volumen explosivo
        """
        try:
            # En producci√≥n, har√≠as web scraping de:
            # https://finviz.com/screener.ashx?v=111&s=ta_unusualvolume
            
            # Por ahora, simular con algunos conocidos
            # En tu implementaci√≥n real, usa requests + BeautifulSoup
            
            print("   üåê Buscando volumen inusual en Finviz...")
            # Aqu√≠ ir√≠a el c√≥digo de scraping
            
            return []  # Retorna vac√≠o por ahora
            
        except Exception as e:
            return []
    
    def build_dynamic_universe(self) -> List[str]:
        """
        Construye universo din√°mico combinando m√∫ltiples fuentes
        
        MEJORA CLAVE: No depende solo de listas est√°ticas
        """
        print("\nüîç CONSTRUYENDO UNIVERSO DIN√ÅMICO...")
        print("="*60)
        
        universe = set()
        
        # Fuente 1: Universo extendido base
        extended = self._get_extended_universe()
        universe.update(extended)
        print(f"   ‚úÖ Base extendida: {len(extended)} tickers")
        
        # Fuente 2: High short interest conocidos
        high_si = self.get_high_short_interest_stocks()
        universe.update(high_si)
        print(f"   ‚úÖ Alto short interest: {len(high_si)} tickers")
        
        # Fuente 3: Volumen inusual (si disponible)
        unusual_vol = self.get_unusual_volume_stocks_from_finviz()
        if unusual_vol:
            universe.update(unusual_vol)
            print(f"   ‚úÖ Volumen inusual: {len(unusual_vol)} tickers")
        
        # Fuente 4: Tickers adicionales del usuario
        user_watchlist = [
            'BYND', 'OPEN', 'CHPT', 'LCFY', 'SIRI', 'XAIR',
            'HTOO', 'CTMX', 'CLOV', 'ALBT', 'ADIL', 'AKBA', 'OPAD'
        ]
        universe.update(user_watchlist)
        print(f"   ‚úÖ Watchlist usuario: {len(user_watchlist)} tickers")
        
        final_universe = list(universe)
        print(f"\n   üéØ UNIVERSO TOTAL: {len(final_universe)} tickers √∫nicos")
        print("="*60)
        
        return final_universe
    
    # ========================================================================
    # AN√ÅLISIS MEJORADO DE CANDIDATOS
    # ========================================================================
    
    def analyze_candidate_enhanced(self, ticker: str) -> Dict:
        """
        An√°lisis mejorado que habr√≠a detectado BYND
        
        Detecta:
        1. Volumen explosivo (spike + aceleraci√≥n)
        2. Compresi√≥n de precio
        3. Breakout potencial
        4. Short interest
        """
        try:
            stock = yf.Ticker(ticker)
            
            # Obtener datos con m√°s historial
            hist = stock.history(period='2mo')
            
            if len(hist) < 20:
                return {
                    'ticker': ticker,
                    'score': 0,
                    'reason': 'Datos insuficientes'
                }
            
            # Datos actuales
            current_price = hist['Close'].iloc[-1]
            current_volume = hist['Volume'].iloc[-1]
            
            # Filtro de precio
            if current_price > self.criteria['price_max']:
                return {
                    'ticker': ticker,
                    'score': 0,
                    'reason': f'Precio ${current_price:.2f} > ${self.criteria["price_max"]}'
                }
            
            # Calcular m√©tricas clave
            avg_volume_20d = hist['Volume'][-20:].mean()
            volume_ratio = current_volume / avg_volume_20d if avg_volume_20d > 0 else 0
            
            # NUEVA M√âTRICA: Aceleraci√≥n de volumen
            recent_vol_5d = hist['Volume'][-5:].mean()
            older_vol_15d = hist['Volume'][-20:-5].mean()
            volume_acceleration = recent_vol_5d / older_vol_15d if older_vol_15d > 0 else 1.0
            
            # NUEVA M√âTRICA: Compresi√≥n de precio
            price_5d = hist['Close'][-5:]
            price_range_pct = ((price_5d.max() - price_5d.min()) / price_5d.min() * 100)
            is_compressed = price_range_pct <= 15  # Rango estrecho
            
            # Cambio de precio
            price_change_pct = ((current_price - hist['Close'].iloc[-2]) / hist['Close'].iloc[-2] * 100)
            
            # Short interest (de info)
            info = stock.info
            short_interest = info.get('shortPercentOfFloat', 0) * 100
            
            # RSI
            delta = hist['Close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            rsi = 100 - (100 / (1 + rs))
            current_rsi = rsi.iloc[-1] if len(rsi) > 0 else 50
            
            # NUEVA M√âTRICA: Distancia de m√°ximo reciente (drawdown)
            max_price_20d = hist['High'][-20:].max()
            drawdown_pct = ((max_price_20d - current_price) / max_price_20d * 100)
            
            # ====================================================================
            # SCORING MEJORADO (habr√≠a detectado BYND)
            # ====================================================================
            
            score = 0
            reasons = []
            urgency_level = "NORMAL"
            
            # 1. VOLUMEN EXPLOSIVO (peso alto)
            if volume_ratio >= 5.0:
                score += 0.35
                reasons.append("üî• VOL EXPLOSIVO (5x+)")
                urgency_level = "URGENTE"
            elif volume_ratio >= 3.0:
                score += 0.25
                reasons.append("‚ö° Vol muy alto (3x+)")
                if urgency_level == "NORMAL":
                    urgency_level = "ALTO"
            elif volume_ratio >= self.criteria['volume_spike_min']:
                score += 0.15
                reasons.append(f"üìä Vol spike ({volume_ratio:.1f}x)")
            
            # 2. ACELERACI√ìN DE VOLUMEN (NUEVO - clave para BYND)
            if volume_acceleration >= 2.0:
                score += 0.15
                reasons.append(f"üöÄ Vol acelerando ({volume_acceleration:.1f}x)")
                urgency_level = "URGENTE"
            elif volume_acceleration >= 1.5:
                score += 0.10
                reasons.append("üìà Vol aumentando")
            
            # 3. COMPRESI√ìN + BREAKOUT
            if is_compressed:
                score += 0.10
                reasons.append(f"üîÑ Comprimido ({price_range_pct:.1f}%)")
                
                # Bonus si est√° rompiendo compresi√≥n con volumen
                if volume_ratio >= 2.0 and price_change_pct > 0:
                    score += 0.10
                    reasons.append("üí• Breakout de compresi√≥n")
            
            # 4. SHORT INTEREST
            if short_interest >= 30:
                score += 0.20
                reasons.append(f"üéØ SI extremo ({short_interest:.1f}%)")
            elif short_interest >= 20:
                score += 0.15
                reasons.append(f"üìå SI alto ({short_interest:.1f}%)")
            elif short_interest >= self.criteria['short_interest_min']:
                score += 0.10
                reasons.append(f"üìç SI moderado ({short_interest:.1f}%)")
            
            # 5. RSI (no sobrecomprado)
            if 30 <= current_rsi <= 70:
                score += 0.05
                reasons.append("‚úÖ RSI saludable")
            elif current_rsi < 30:
                score += 0.10
                reasons.append("üîΩ RSI oversold")
            
            # 6. DRAWDOWN (recuperaci√≥n de ca√≠da)
            if drawdown_pct >= 50 and drawdown_pct <= 80:
                score += 0.10
                reasons.append(f"üìâ Recuperando de -{drawdown_pct:.0f}%")
            
            # 7. MOMENTUM POSITIVO
            if price_change_pct > 5:
                score += 0.05
                reasons.append(f"‚¨ÜÔ∏è Momentum +{price_change_pct:.1f}%")
            
            # Penalizaci√≥n por ca√≠da extrema del d√≠a
            if price_change_pct < self.criteria['min_price_change']:
                score *= 0.5
                reasons.append(f"‚ö†Ô∏è Ca√≠da fuerte {price_change_pct:.1f}%")
            
            # Normalizar score
            score = min(1.0, score)
            
            return {
                'ticker': ticker,
                'score': score,
                'urgency': urgency_level,
                'price': current_price,
                'price_change_pct': price_change_pct,
                'volume_ratio': volume_ratio,
                'volume_acceleration': volume_acceleration,
                'short_interest': short_interest,
                'rsi': current_rsi,
                'is_compressed': is_compressed,
                'price_range_pct': price_range_pct,
                'drawdown_pct': drawdown_pct,
                'reasons': reasons,
                'market_cap': info.get('marketCap', 0)
            }
            
        except Exception as e:
            return {
                'ticker': ticker,
                'score': 0,
                'error': str(e)[:100]
            }
    
    def screen_universe_parallel(self, universe: List[str], max_workers: int = 10) -> List[Dict]:
        """
        Escanea universo en paralelo con an√°lisis mejorado
        """
        print(f"\nüîÑ ESCANEANDO {len(universe)} TICKERS...")
        print("="*60)
        
        results = []
        
        # Fase 1: Filtro b√°sico r√°pido (precio)
        print("üìã Fase 1: Filtro r√°pido de precio...")
        candidates = []
        
        for ticker in universe[:100]:  # Limitar a 100 para no saturar yfinance
            try:
                stock = yf.Ticker(ticker)
                hist = stock.history(period='5d')
                
                if len(hist) > 0:
                    price = hist['Close'].iloc[-1]
                    if 0.50 <= price <= self.criteria['price_max']:
                        candidates.append(ticker)
            except:
                continue
        
        print(f"   ‚úÖ {len(candidates)} candidatos pasaron filtro de precio")
        
        # Fase 2: An√°lisis detallado en paralelo
        print("\nüîç Fase 2: An√°lisis detallado en paralelo...")
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_ticker = {
                executor.submit(self.analyze_candidate_enhanced, ticker): ticker 
                for ticker in candidates
            }
            
            completed = 0
            for future in concurrent.futures.as_completed(future_to_ticker):
                result = future.result()
                results.append(result)
                completed += 1
                
                if completed % 10 == 0:
                    print(f"   Procesados: {completed}/{len(candidates)}")
        
        # Ordenar por score
        results.sort(key=lambda x: x.get('score', 0), reverse=True)
        
        print(f"‚úÖ An√°lisis completo de {len(results)} tickers")
        
        return results
    
    def generate_report_enhanced(self, results: List[Dict]) -> Dict:
        """
        Genera reporte mejorado con clasificaci√≥n por urgencia
        """
        print("\n" + "="*70)
        print("üìä REPORTE DE SCREENING V2 ENHANCED")
        print("="*70)
        
        # Clasificar por score y urgencia
        urgent = [r for r in results if r.get('urgency') == 'URGENTE' and r.get('score', 0) >= 0.6]
        high = [r for r in results if r.get('score', 0) >= 0.6 and r.get('urgency') != 'URGENTE']
        medium = [r for r in results if 0.4 <= r.get('score', 0) < 0.6]
        low = [r for r in results if 0.2 <= r.get('score', 0) < 0.4]
        
        print(f"\nüìà ESTAD√çSTICAS:")
        print(f"   ‚Ä¢ Total procesados: {len(results)}")
        print(f"   ‚Ä¢ üö® URGENTES (‚â•0.6 + vol explosivo): {len(urgent)}")
        print(f"   ‚Ä¢ ‚ö° ALTA probabilidad (‚â•0.6): {len(high)}")
        print(f"   ‚Ä¢ üìä MEDIA probabilidad (0.4-0.6): {len(medium)}")
        print(f"   ‚Ä¢ üìâ BAJA probabilidad (0.2-0.4): {len(low)}")
        
        # Mostrar URGENTES primero (casos como BYND)
        if urgent:
            print(f"\n{'='*70}")
            print(f"üö® CANDIDATOS URGENTES - ATENCI√ìN INMEDIATA ({len(urgent)})")
            print(f"{'='*70}")
            
            for i, candidate in enumerate(urgent[:5], 1):
                self._print_candidate_detail(i, candidate, detailed=True)
        
        # Top candidatos normales
        print(f"\n{'='*70}")
        print(f"‚ö° TOP CANDIDATOS ALTA PROBABILIDAD ({len(high)})")
        print(f"{'='*70}")
        
        for i, candidate in enumerate(high[:10], 1):
            self._print_candidate_detail(i, candidate, detailed=False)
        
        # Candidatos medios (referencia)
        if medium:
            print(f"\nüìä CANDIDATOS PROBABILIDAD MEDIA ({len(medium)}):")
            medium_tickers = [c['ticker'] for c in medium[:20]]
            print(f"   {', '.join(medium_tickers)}")
        
        # Recomendaciones finales
        all_recommended = urgent + high
        print(f"\n{'='*70}")
        print(f"ü§ñ RECOMENDADOS PARA ROBOT ADVISOR ({len(all_recommended)}):")
        print(f"{'='*70}")
        
        if urgent:
            print(f"\nüö® PRIORIDAD M√ÅXIMA (analizar HOY):")
            for c in urgent:
                print(f"   ‚Ä¢ {c['ticker']} (Score: {c['score']:.2f}) - {', '.join(c.get('reasons', [])[:2])}")
        
        if high:
            print(f"\n‚ö° ALTA PRIORIDAD:")
            for c in high[:10]:
                print(f"   ‚Ä¢ {c['ticker']} (Score: {c['score']:.2f})")
        
        return {
            'timestamp': datetime.now(),
            'mode': self.mode,
            'statistics': {
                'total': len(results),
                'urgent': len(urgent),
                'high': len(high),
                'medium': len(medium),
                'low': len(low)
            },
            'urgent_candidates': urgent,
            'high_candidates': high,
            'medium_candidates': medium,
            'all_recommended': [c['ticker'] for c in all_recommended],
            'all_results': results
        }
    
    def _print_candidate_detail(self, index: int, candidate: Dict, detailed: bool = False):
        """Imprime detalles de un candidato"""
        ticker = candidate['ticker']
        score = candidate.get('score', 0)
        price = candidate.get('price', 0)
        change = candidate.get('price_change_pct', 0)
        vol_ratio = candidate.get('volume_ratio', 0)
        vol_accel = candidate.get('volume_acceleration', 1.0)
        si = candidate.get('short_interest', 0)
        urgency = candidate.get('urgency', 'NORMAL')
        
        # Indicador de urgencia
        urgency_icon = "üö®" if urgency == "URGENTE" else "‚ö°" if urgency == "ALTO" else "üìä"
        
        print(f"\n{index:2d}. {urgency_icon} {ticker:6s} | Score: {score:.2f}")
        print(f"     üí∞ ${price:.3f} ({change:+.1f}%) | Vol: {vol_ratio:.1f}x")
        
        if detailed:
            print(f"     üìä Vol aceleraci√≥n: {vol_accel:.1f}x | SI: {si:.1f}%")
            print(f"     üéØ Comprimido: {'S√ç' if candidate.get('is_compressed') else 'NO'} "
                  f"(Rango: {candidate.get('price_range_pct', 0):.1f}%)")
        
        reasons = candidate.get('reasons', [])
        if reasons:
            print(f"     ‚≠ê {' | '.join(reasons[:3])}")
    
    def save_results_enhanced(self, report: Dict):
        """Guarda resultados con timestamp"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M')
        
        # JSON completo
        json_filename = f"screening_v2_{timestamp}.json"
        json_data = {
            'timestamp': report['timestamp'].isoformat(),
            'mode': report['mode'],
            'statistics': report['statistics'],
            'urgent_candidates': report['urgent_candidates'][:20],
            'high_candidates': report['high_candidates'][:30],
            'recommended_tickers': report['all_recommended']
        }
        
        with open(json_filename, 'w') as f:
            json.dump(json_data, f, indent=2, default=str)
        
        print(f"\nüíæ Resultados guardados:")
        print(f"   ‚Ä¢ JSON: {json_filename}")
        
        # CSV simple para importar
        csv_filename = f"screening_v2_{timestamp}.csv"
        
        # Combinar urgentes + high
        top_candidates = report['urgent_candidates'] + report['high_candidates']
        if top_candidates:
            df = pd.DataFrame(top_candidates[:50])
            df.to_csv(csv_filename, index=False)
            print(f"   ‚Ä¢ CSV: {csv_filename}")
        
        return json_filename
    
    def run_full_screening(self):
        """Ejecuta screening completo mejorado"""
        print("\n" + "="*70)
        print("üöÄ SCREENER V2 ENHANCED - DETECCI√ìN DIN√ÅMICA")
        print("="*70)
        print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üîß Modo: {self.mode.upper()}")
        print()
        
        # 1. Construir universo din√°mico
        universe = self.build_dynamic_universe()
        
        # 2. Escanear universo
        results = self.screen_universe_parallel(universe)
        
        # 3. Generar reporte
        report = self.generate_report_enhanced(results)
        
        # 4. Guardar resultados
        filename = self.save_results_enhanced(report)
        
        # 5. Resumen final
        print(f"\n{'='*70}")
        print("‚úÖ SCREENING COMPLETADO")
        print(f"{'='*70}")
        print(f"üö® Urgentes: {len(report['urgent_candidates'])}")
        print(f"‚ö° Alta prob: {len(report['high_candidates'])}")
        print(f"üìä Media prob: {len(report['medium_candidates'])}")
        print(f"üéØ Total recomendados: {len(report['all_recommended'])}")
        print(f"\nüí° PR√ìXIMO PASO:")
        print(f"   Ejecuta el Robot Advisor V3 con estos candidatos")
        print(f"{'='*70}")
        
        return report


def test_bynd_detection():
    """
    Test: ¬øHabr√≠a detectado BYND este screener?
    """
    print("\n" + "="*70)
    print("üß™ TEST: ¬øHABR√çA DETECTADO BYND?")
    print("="*70)
    
    screener = DynamicStockScreener(mode="aggressive")
    
    # Analizar solo BYND
    result = screener.analyze_candidate_enhanced("BYND")
    
    print("\nüìä AN√ÅLISIS DE BYND:")
    print("-"*70)
    print(f"   ‚Ä¢ Ticker: {result['ticker']}")
    print(f"   ‚Ä¢ Score: {result.get('score', 0):.3f}")
    print(f"   ‚Ä¢ Urgencia: {result.get('urgency', 'N/A')}")
    print(f"   ‚Ä¢ Precio: ${result.get('price', 0):.2f}")
    print(f"   ‚Ä¢ Cambio: {result.get('price_change_pct', 0):+.1f}%")
    print(f"   ‚Ä¢ Vol ratio: {result.get('volume_ratio', 0):.1f}x")
    print(f"   ‚Ä¢ Vol aceleraci√≥n: {result.get('volume_acceleration', 0):.1f}x")
    print(f"   ‚Ä¢ Short interest: {result.get('short_interest', 0):.1f}%")
    print(f"   ‚Ä¢ Comprimido: {result.get('is_compressed', False)}")
    
    reasons = result.get('reasons', [])
    if reasons:
        print(f"\n   ‚≠ê Razones detectadas:")
        for reason in reasons:
            print(f"      ‚Ä¢ {reason}")
    
    score = result.get('score', 0)
    if score >= 0.6:
        print(f"\n   ‚úÖ BYND HABR√çA SIDO DETECTADO")
        print(f"   ‚úÖ Score {score:.3f} >= 0.60 (threshold recomendado)")
        if result.get('urgency') == 'URGENTE':
            print(f"   üö® Clasificado como URGENTE - Alerta m√°xima")
    else:
        print(f"\n   ‚ö†Ô∏è  Score {score:.3f} < 0.60")
        print(f"   üí° Considera modo 'aggressive' o revisar criterios")
    
    print("="*70)


def main():
    """Funci√≥n principal"""
    print("üöÄ SCREENER V2 ENHANCED - DETECCI√ìN DIN√ÅMICA DE SQUEEZES")
    print()
    print("Opciones:")
    print("1. Ejecutar screening completo (modo BALANCED)")
    print("2. Ejecutar screening completo (modo AGGRESSIVE)")
    print("3. Test: ¬øHabr√≠a detectado BYND?")
    print("4. Ejecutar ambos (screening + test BYND)")
    
    choice = input("\nElegir (1-4, Enter para test BYND): ").strip() or '3'
    
    if choice == '1':
        screener = DynamicStockScreener(mode="balanced")
        screener.run_full_screening()
    
    elif choice == '2':
        screener = DynamicStockScreener(mode="aggressive")
        screener.run_full_screening()
    
    elif choice == '3':
        test_bynd_detection()
    
    elif choice == '4':
        print("\n1. Primero: Test BYND")
        test_bynd_detection()
        
        input("\nPresiona Enter para continuar con screening completo...")
        
        print("\n2. Ahora: Screening completo")
        screener = DynamicStockScreener(mode="aggressive")
        screener.run_full_screening()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Screening interrumpido")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
